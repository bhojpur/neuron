package cudnn

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"
import (
	"github.com/pkg/errors"
)

// Filter is a representation of cudnnFilterDescriptor_t.
type Filter struct {
	internal C.cudnnFilterDescriptor_t

	dataType DataType
	format   TensorFormat
	shape    []int
}

// NewFilter creates a new Filter.
func NewFilter(dataType DataType, format TensorFormat, shape []int) (retVal *Filter, err error) {
	var internal C.cudnnFilterDescriptor_t
	if err = result(C.cudnnCreateFilterDescriptor(&internal)); err != nil {
		return nil, err
	}
	switch len(shape) {
	case 0, 1, 2, 3:
		return nil, errors.New("Cannot create filter with a shape < 4 dimensions")
	case 4:
		if err = result(C.cudnnSetFilter4dDescriptor(internal, dataType.C(), format.C(), C.int(shape[0]), C.int(shape[1]), C.int(shape[2]), C.int(shape[3]))); err != nil {
			return nil, err
		}
	default:
		filterDimA, filterDimAManaged := ints2CIntPtr(shape)
		defer returnManaged(filterDimAManaged)
		if err = result(C.cudnnSetFilterNdDescriptor(internal, dataType.C(), format.C(), C.int(len(shape)), filterDimA)); err != nil {
			return nil, err
		}
	}
	return &Filter{
		internal: internal,
		format:   format,
		shape:    shape,
	}, nil
}

// DataType returns the data type of the filter
func (f *Filter) DataType() DataType { return f.dataType }

// Filter returns the TensorFormat of the filter
func (f *Filter) Format() TensorFormat { return f.format }

// Shape returns a copy of the shape.
func (f *Filter) Shape() []int {
	retVal := make([]int, len(f.shape))
	copy(retVal, f.shape)
	return retVal
}

func destroyFilter(obj *Filter) { C.cudnnDestroyFilterDescriptor(obj.internal) }
