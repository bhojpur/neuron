package cudnn

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* WAS Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
// #include "algorithm.h"
import "C"
import (
	"fmt"
	"runtime"
)

type Algorithm interface{}

// AlgorithmDescriptor is a representation of cudnnAlgorithmDescriptor_t.
type AlgorithmDescriptor struct {
	internal C.cudnnAlgorithmDescriptor_t

	algorithm Algorithm
}

// NewAlgorithmDescriptor creates a new AlgorithmDescriptor.
func NewAlgorithmDescriptor(algorithm Algorithm) (retVal *AlgorithmDescriptor, err error) {
	var internal C.cudnnAlgorithmDescriptor_t
	if err := result(C.cudnnCreateAlgorithmDescriptor(&internal)); err != nil {
		return nil, err
	}

	switch a := algorithm.(type) {
	case ConvolutionFwdAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, C.makeConvFwdAlgo(a.C()))); err != nil {
			return nil, err
		}
	case ConvolutionBwdFilterAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, C.makeConvBwdFilterAlgo(a.C()))); err != nil {
			return nil, err
		}
	case ConvolutionBwdDataAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, C.makeConvBwdDataAlgo(a.C()))); err != nil {
			return nil, err
		}
	case RNNAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, C.makeRNNAlgo(a.C()))); err != nil {
			return nil, err
		}
	case CTCLossAlgo:
		if err := result(C.cudnnSetAlgorithmDescriptor(internal, C.makeCTCLossAlgo(a.C()))); err != nil {
			return nil, err
		}
	default:
		return nil, fmt.Errorf(`unknown algorithm specified`)
	}

	retVal = &AlgorithmDescriptor{
		internal:  internal,
		algorithm: algorithm,
	}
	runtime.SetFinalizer(retVal, destroyAlgorithmDescriptor)
	return retVal, nil
}

// C returns the internal cgo representation
func (a *AlgorithmDescriptor) C() C.cudnnAlgorithmDescriptor_t { return a.internal }

func destroyAlgorithmDescriptor(obj *AlgorithmDescriptor) {
	C.cudnnDestroyAlgorithmDescriptor(obj.internal)
}
