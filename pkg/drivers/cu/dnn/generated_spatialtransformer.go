package cudnn

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"
import (
	"runtime"
)

// SpatialTransformer is a representation of cudnnSpatialTransformerDescriptor_t.
type SpatialTransformer struct {
	internal C.cudnnSpatialTransformerDescriptor_t

	samplerType SamplerType
	dataType    DataType
	nbDims      int
	dimA        []int
}

// NewSpatialTransformer creates a new SpatialTransformer.
func NewSpatialTransformer(samplerType SamplerType, dataType DataType, nbDims int, dimA []int) (retVal *SpatialTransformer, err error) {
	var internal C.cudnnSpatialTransformerDescriptor_t
	if err := result(C.cudnnCreateSpatialTransformerDescriptor(&internal)); err != nil {
		return nil, err
	}

	dimAC, dimACManaged := ints2CIntPtr(dimA)
	defer returnManaged(dimACManaged)

	if err := result(C.cudnnSetSpatialTransformerNdDescriptor(internal, samplerType.C(), dataType.C(), C.int(nbDims), dimAC)); err != nil {
		return nil, err
	}

	retVal = &SpatialTransformer{
		internal:    internal,
		samplerType: samplerType,
		dataType:    dataType,
		nbDims:      nbDims,
		dimA:        dimA,
	}
	runtime.SetFinalizer(retVal, destroySpatialTransformer)
	return retVal, nil
}

// C() returns the internal C representation of the Spatial Transformer
func (s *SpatialTransformer) C() C.cudnnSpatialTransformerDescriptor_t { return s.internal }

// SamplerType returns the internal samplerType.
func (s *SpatialTransformer) SamplerType() SamplerType { return s.samplerType }

// DataType returns the internal dataType.
func (s *SpatialTransformer) DataType() DataType { return s.dataType }

// NbDims returns the internal nbDims.
func (s *SpatialTransformer) NbDims() int { return s.nbDims }

// DimA returns the internal `dimA` slice.
func (s *SpatialTransformer) DimA() []int { return s.dimA }

func destroySpatialTransformer(obj *SpatialTransformer) {
	C.cudnnDestroySpatialTransformerDescriptor(obj.internal)
}
