package cudnn

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* WAS Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"
import "runtime"

// AlgorithmPerformance is a representation of cudnnAlgorithmPerformance_t.
type AlgorithmPerformance struct {
	internal C.cudnnAlgorithmPerformance_t

	n int

	algoDesc *AlgorithmDescriptor
	status   Status
	time     float32
	memory   uintptr
}

// NewAlgorithmPerformance creates `n` new cudnnAlgorithmPerformance objects, wrapped in AlgorithmPerformance.
func NewAlgorithmPerformance(algoDesc *AlgorithmDescriptor, n int, status Status, time float32, memory uintptr) (retVal *AlgorithmPerformance, err error) {
	var internal C.cudnnAlgorithmPerformance_t
	if err := result(C.cudnnCreateAlgorithmPerformance(&internal, C.int(n))); err != nil {
		return nil, err
	}

	if err := result(C.cudnnSetAlgorithmPerformance(internal, algoDesc.internal, status.C(), C.float(time), C.size_t(memory))); err != nil {
		return nil, err
	}

	retVal = &AlgorithmPerformance{
		internal: internal,
		algoDesc: algoDesc,
		status:   status,
		time:     time,
		memory:   memory,
	}
	runtime.SetFinalizer(retVal, destroyAlgorithmPerformance)
	return retVal, nil
}

// C returns the cgo representation.
func (a *AlgorithmPerformance) C() C.cudnnAlgorithmPerformance_t { return a.internal }

// AlgoDesc returns the internal algoDesc.
func (a *AlgorithmPerformance) AlgoDesc() *AlgorithmDescriptor { return a.algoDesc }

// Status returns the internal status.
func (a *AlgorithmPerformance) Status() Status { return a.status }

// Time returns the internal time.
func (a *AlgorithmPerformance) Time() float32 { return a.time }

// Memory returns the internal memory.
func (a *AlgorithmPerformance) Memory() uintptr { return a.memory }

// N returns how many algorithm performance objects were created in the graphics card.
func (a *AlgorithmPerformance) N() int { return a.n }

func destroyAlgorithmPerformance(obj *AlgorithmPerformance) {
	C.cudnnDestroyAlgorithmPerformance(&obj.internal, C.int(obj.n))
}
