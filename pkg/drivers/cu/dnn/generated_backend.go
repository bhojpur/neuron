package cudnn

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* WAS Generated by gencudnn. DO NOT EDIT */

// #include <cudnn.h>
import "C"
import (
	"runtime"
	"unsafe"
)

// Backend is a representation of cudnnBackendDescriptor_t.
type Backend struct {
	internal C.cudnnBackendDescriptor_t

	backendType     BackendDescriptorType
	attributeName   BackendAttributeName
	attributeType   BackendAttributeType
	elementCount    int64
	arrayOfElements Memory
}

// NewBackend creates a new Backend.
func NewBackend(attributeName BackendAttributeName, attributeType BackendAttributeType, backendType BackendDescriptorType, elementCount int64, arrayOfElements Memory) (retVal *Backend, err error) {
	var internal C.cudnnBackendDescriptor_t
	if err := result(C.cudnnBackendCreateDescriptor(backendType.C(), &internal)); err != nil {
		return nil, err
	}

	if err := result(C.cudnnBackendSetAttribute(internal, attributeName.C(), attributeType.C(), C.int64_t(elementCount), unsafe.Pointer(arrayOfElements.Uintptr()))); err != nil {
		return nil, err
	}

	retVal = &Backend{
		internal:        internal,
		backendType:     backendType,
		attributeName:   attributeName,
		attributeType:   attributeType,
		elementCount:    elementCount,
		arrayOfElements: arrayOfElements,
	}
	runtime.SetFinalizer(retVal, destroyBackend)
	return retVal, nil
}

// C() returns the internal cgo representation
func (b *Backend) C() C.cudnnBackendDescriptor_t { return b.internal }

// Type returns the backend type.
func (b *Backend) Type() BackendDescriptorType { return b.backendType }

// AttributeName returns the internal attributeName.
func (b *Backend) AttributeName() BackendAttributeName { return b.attributeName }

// AttributeType returns the internal attributeType.
func (b *Backend) AttributeType() BackendAttributeType { return b.attributeType }

// ElementCount returns the internal elementCount parameter.
func (b *Backend) ElementCount() int64 { return b.elementCount }

// ArrayOfElements returns the internal arrayOfElements.
func (b *Backend) ArrayOfElements() Memory { return b.arrayOfElements }

func destroyBackend(obj *Backend) { C.cudnnBackendDestroyDescriptor(obj.internal) }
