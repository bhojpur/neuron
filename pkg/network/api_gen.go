package network

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import G "github.com/bhojpur/neuron/pkg/engine"

// Code generated by genapi, which is a API generation tool for Bhojpur Neuron. DO NOT EDIT.

// BroadcastAdd performs a add. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastAdd(a, b *G.Node, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Add(a, b)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Add(a2, b2)
}

// BroadcastSub performs a sub. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastSub(a, b *G.Node, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Sub(a, b)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Sub(a2, b2)
}

// BroadcastHadamardProd performs a hadamardprod. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastHadamardProd(a, b *G.Node, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.HadamardProd(a, b)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.HadamardProd(a2, b2)
}

// BroadcastHadamardDiv performs a hadamarddiv. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastHadamardDiv(a, b *G.Node, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.HadamardDiv(a, b)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.HadamardDiv(a2, b2)
}

// BroadcastPow performs a pow. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastPow(a, b *G.Node, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Pow(a, b)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Pow(a2, b2)
}

// BroadcastLt performs a lt. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastLt(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Lt(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Lt(a2, b2, retSame)
}

// BroadcastGt performs a gt. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastGt(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Gt(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Gt(a2, b2, retSame)
}

// BroadcastLte performs a lte. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastLte(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Lte(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Lte(a2, b2, retSame)
}

// BroadcastGte performs a gte. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastGte(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Gte(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Gte(a2, b2, retSame)
}

// BroadcastEq performs a eq. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastEq(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Eq(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Eq(a2, b2, retSame)
}

// BroadcastNe performs a ne. The operation is precomposed with a broadcast such that the shapes matches before operations commence.
func BroadcastNe(a, b *G.Node, retSame bool, leftPattern, rightPattern []byte) (*G.Node, error) {
	if a.Shape().Eq(b.Shape()) {
		return G.Ne(a, b, retSame)
	}
	a2, b2, err := G.Broadcast(a, b, G.NewBroadcastPattern(leftPattern, rightPattern))
	if err != nil {
		return nil, err
	}
	return G.Ne(a2, b2, retSame)
}